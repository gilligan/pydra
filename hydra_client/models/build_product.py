# coding: utf-8

"""
    Hydra API

    Specification of the Hydra REST API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from hydra_client.configuration import Configuration


class BuildProduct(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'filesize': 'int',
        'defaultpath': 'str',
        'type': 'str',
        'name': 'str',
        'sha1hash': 'str',
        'path': 'str',
        'subtype': 'str',
        'sha256hash': 'str'
    }

    attribute_map = {
        'filesize': 'filesize',
        'defaultpath': 'defaultpath',
        'type': 'type',
        'name': 'name',
        'sha1hash': 'sha1hash',
        'path': 'path',
        'subtype': 'subtype',
        'sha256hash': 'sha256hash'
    }

    def __init__(self, filesize=None, defaultpath=None, type=None, name=None, sha1hash=None, path=None, subtype=None, sha256hash=None, local_vars_configuration=None):  # noqa: E501
        """BuildProduct - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._filesize = None
        self._defaultpath = None
        self._type = None
        self._name = None
        self._sha1hash = None
        self._path = None
        self._subtype = None
        self._sha256hash = None
        self.discriminator = None

        self.filesize = filesize
        if defaultpath is not None:
            self.defaultpath = defaultpath
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        self.sha1hash = sha1hash
        if path is not None:
            self.path = path
        if subtype is not None:
            self.subtype = subtype
        self.sha256hash = sha256hash

    @property
    def filesize(self):
        """Gets the filesize of this BuildProduct.  # noqa: E501

        Size of the produced file  # noqa: E501

        :return: The filesize of this BuildProduct.  # noqa: E501
        :rtype: int
        """
        return self._filesize

    @filesize.setter
    def filesize(self, filesize):
        """Sets the filesize of this BuildProduct.

        Size of the produced file  # noqa: E501

        :param filesize: The filesize of this BuildProduct.  # noqa: E501
        :type: int
        """

        self._filesize = filesize

    @property
    def defaultpath(self):
        """Gets the defaultpath of this BuildProduct.  # noqa: E501

        This is a Git/Mercurial commit hash or a Subversion revision number  # noqa: E501

        :return: The defaultpath of this BuildProduct.  # noqa: E501
        :rtype: str
        """
        return self._defaultpath

    @defaultpath.setter
    def defaultpath(self, defaultpath):
        """Sets the defaultpath of this BuildProduct.

        This is a Git/Mercurial commit hash or a Subversion revision number  # noqa: E501

        :param defaultpath: The defaultpath of this BuildProduct.  # noqa: E501
        :type: str
        """

        self._defaultpath = defaultpath

    @property
    def type(self):
        """Gets the type of this BuildProduct.  # noqa: E501

        Types of build product (user defined)  # noqa: E501

        :return: The type of this BuildProduct.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BuildProduct.

        Types of build product (user defined)  # noqa: E501

        :param type: The type of this BuildProduct.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this BuildProduct.  # noqa: E501

        Name of the file  # noqa: E501

        :return: The name of this BuildProduct.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BuildProduct.

        Name of the file  # noqa: E501

        :param name: The name of this BuildProduct.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def sha1hash(self):
        """Gets the sha1hash of this BuildProduct.  # noqa: E501

        sha1 hash of the file  # noqa: E501

        :return: The sha1hash of this BuildProduct.  # noqa: E501
        :rtype: str
        """
        return self._sha1hash

    @sha1hash.setter
    def sha1hash(self, sha1hash):
        """Sets the sha1hash of this BuildProduct.

        sha1 hash of the file  # noqa: E501

        :param sha1hash: The sha1hash of this BuildProduct.  # noqa: E501
        :type: str
        """

        self._sha1hash = sha1hash

    @property
    def path(self):
        """Gets the path of this BuildProduct.  # noqa: E501

        the nix store path  # noqa: E501

        :return: The path of this BuildProduct.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this BuildProduct.

        the nix store path  # noqa: E501

        :param path: The path of this BuildProduct.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def subtype(self):
        """Gets the subtype of this BuildProduct.  # noqa: E501

        user-specified  # noqa: E501

        :return: The subtype of this BuildProduct.  # noqa: E501
        :rtype: str
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """Sets the subtype of this BuildProduct.

        user-specified  # noqa: E501

        :param subtype: The subtype of this BuildProduct.  # noqa: E501
        :type: str
        """

        self._subtype = subtype

    @property
    def sha256hash(self):
        """Gets the sha256hash of this BuildProduct.  # noqa: E501

        sha256 hash of the file  # noqa: E501

        :return: The sha256hash of this BuildProduct.  # noqa: E501
        :rtype: str
        """
        return self._sha256hash

    @sha256hash.setter
    def sha256hash(self, sha256hash):
        """Sets the sha256hash of this BuildProduct.

        sha256 hash of the file  # noqa: E501

        :param sha256hash: The sha256hash of this BuildProduct.  # noqa: E501
        :type: str
        """

        self._sha256hash = sha256hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BuildProduct):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BuildProduct):
            return True

        return self.to_dict() != other.to_dict()
