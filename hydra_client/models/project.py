# coding: utf-8

"""
    Hydra API

    Specification of the Hydra REST API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from hydra_client.configuration import Configuration


class Project(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'owner': 'str',
        'name': 'str',
        'displayname': 'str',
        'description': 'str',
        'hidden': 'bool',
        'enabled': 'bool',
        'jobsets': 'list[str]'
    }

    attribute_map = {
        'owner': 'owner',
        'name': 'name',
        'displayname': 'displayname',
        'description': 'description',
        'hidden': 'hidden',
        'enabled': 'enabled',
        'jobsets': 'jobsets'
    }

    def __init__(self, owner=None, name=None, displayname=None, description=None, hidden=None, enabled=None, jobsets=None, local_vars_configuration=None):  # noqa: E501
        """Project - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._owner = None
        self._name = None
        self._displayname = None
        self._description = None
        self._hidden = None
        self._enabled = None
        self._jobsets = None
        self.discriminator = None

        if owner is not None:
            self.owner = owner
        if name is not None:
            self.name = name
        if displayname is not None:
            self.displayname = displayname
        if description is not None:
            self.description = description
        if hidden is not None:
            self.hidden = hidden
        if enabled is not None:
            self.enabled = enabled
        if jobsets is not None:
            self.jobsets = jobsets

    @property
    def owner(self):
        """Gets the owner of this Project.  # noqa: E501

        username of the project owner  # noqa: E501

        :return: The owner of this Project.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Project.

        username of the project owner  # noqa: E501

        :param owner: The owner of this Project.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def name(self):
        """Gets the name of this Project.  # noqa: E501

        name of the project  # noqa: E501

        :return: The name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.

        name of the project  # noqa: E501

        :param name: The name of this Project.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def displayname(self):
        """Gets the displayname of this Project.  # noqa: E501

        name to be displayed in the web interface  # noqa: E501

        :return: The displayname of this Project.  # noqa: E501
        :rtype: str
        """
        return self._displayname

    @displayname.setter
    def displayname(self, displayname):
        """Sets the displayname of this Project.

        name to be displayed in the web interface  # noqa: E501

        :param displayname: The displayname of this Project.  # noqa: E501
        :type: str
        """

        self._displayname = displayname

    @property
    def description(self):
        """Gets the description of this Project.  # noqa: E501

        description of the project  # noqa: E501

        :return: The description of this Project.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Project.

        description of the project  # noqa: E501

        :param description: The description of this Project.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def hidden(self):
        """Gets the hidden of this Project.  # noqa: E501

        when set to true the project is not displayed in the web interface  # noqa: E501

        :return: The hidden of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Project.

        when set to true the project is not displayed in the web interface  # noqa: E501

        :param hidden: The hidden of this Project.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def enabled(self):
        """Gets the enabled of this Project.  # noqa: E501

        when set to true the project gets scheduled for evaluation  # noqa: E501

        :return: The enabled of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Project.

        when set to true the project gets scheduled for evaluation  # noqa: E501

        :param enabled: The enabled of this Project.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def jobsets(self):
        """Gets the jobsets of this Project.  # noqa: E501

        list of jobsets belonging to this project  # noqa: E501

        :return: The jobsets of this Project.  # noqa: E501
        :rtype: list[str]
        """
        return self._jobsets

    @jobsets.setter
    def jobsets(self, jobsets):
        """Sets the jobsets of this Project.

        list of jobsets belonging to this project  # noqa: E501

        :param jobsets: The jobsets of this Project.  # noqa: E501
        :type: list[str]
        """

        self._jobsets = jobsets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Project):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Project):
            return True

        return self.to_dict() != other.to_dict()
