# coding: utf-8

"""
    Hydra API

    Specification of the Hydra REST API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from hydra_client.configuration import Configuration


class InlineObject2(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'checkinterval': 'int',
        'enabled': 'bool',
        'visible': 'bool',
        'keepnr': 'int',
        'nixexprinput': 'str',
        'nixexprpath': 'str',
        'inputs': 'dict(str, JobsetInput)'
    }

    attribute_map = {
        'description': 'description',
        'checkinterval': 'checkinterval',
        'enabled': 'enabled',
        'visible': 'visible',
        'keepnr': 'keepnr',
        'nixexprinput': 'nixexprinput',
        'nixexprpath': 'nixexprpath',
        'inputs': 'inputs'
    }

    def __init__(self, description=None, checkinterval=None, enabled=None, visible=None, keepnr=None, nixexprinput=None, nixexprpath=None, inputs=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject2 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._checkinterval = None
        self._enabled = None
        self._visible = None
        self._keepnr = None
        self._nixexprinput = None
        self._nixexprpath = None
        self._inputs = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if checkinterval is not None:
            self.checkinterval = checkinterval
        if enabled is not None:
            self.enabled = enabled
        if visible is not None:
            self.visible = visible
        if keepnr is not None:
            self.keepnr = keepnr
        if nixexprinput is not None:
            self.nixexprinput = nixexprinput
        self.nixexprpath = nixexprpath
        if inputs is not None:
            self.inputs = inputs

    @property
    def description(self):
        """Gets the description of this InlineObject2.  # noqa: E501

        a description of the jobset  # noqa: E501

        :return: The description of this InlineObject2.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineObject2.

        a description of the jobset  # noqa: E501

        :param description: The description of this InlineObject2.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def checkinterval(self):
        """Gets the checkinterval of this InlineObject2.  # noqa: E501

        interval (in seconds) in which to check for evaluation  # noqa: E501

        :return: The checkinterval of this InlineObject2.  # noqa: E501
        :rtype: int
        """
        return self._checkinterval

    @checkinterval.setter
    def checkinterval(self, checkinterval):
        """Sets the checkinterval of this InlineObject2.

        interval (in seconds) in which to check for evaluation  # noqa: E501

        :param checkinterval: The checkinterval of this InlineObject2.  # noqa: E501
        :type: int
        """

        self._checkinterval = checkinterval

    @property
    def enabled(self):
        """Gets the enabled of this InlineObject2.  # noqa: E501

        when true the jobset gets scheduled for evaluation  # noqa: E501

        :return: The enabled of this InlineObject2.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this InlineObject2.

        when true the jobset gets scheduled for evaluation  # noqa: E501

        :param enabled: The enabled of this InlineObject2.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def visible(self):
        """Gets the visible of this InlineObject2.  # noqa: E501

        when true the jobset is visible in the web frontend  # noqa: E501

        :return: The visible of this InlineObject2.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this InlineObject2.

        when true the jobset is visible in the web frontend  # noqa: E501

        :param visible: The visible of this InlineObject2.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def keepnr(self):
        """Gets the keepnr of this InlineObject2.  # noqa: E501

        number or evaluations to keep  # noqa: E501

        :return: The keepnr of this InlineObject2.  # noqa: E501
        :rtype: int
        """
        return self._keepnr

    @keepnr.setter
    def keepnr(self, keepnr):
        """Sets the keepnr of this InlineObject2.

        number or evaluations to keep  # noqa: E501

        :param keepnr: The keepnr of this InlineObject2.  # noqa: E501
        :type: int
        """

        self._keepnr = keepnr

    @property
    def nixexprinput(self):
        """Gets the nixexprinput of this InlineObject2.  # noqa: E501

        the name of the jobset input which contains the nixexprpath  # noqa: E501

        :return: The nixexprinput of this InlineObject2.  # noqa: E501
        :rtype: str
        """
        return self._nixexprinput

    @nixexprinput.setter
    def nixexprinput(self, nixexprinput):
        """Sets the nixexprinput of this InlineObject2.

        the name of the jobset input which contains the nixexprpath  # noqa: E501

        :param nixexprinput: The nixexprinput of this InlineObject2.  # noqa: E501
        :type: str
        """

        self._nixexprinput = nixexprinput

    @property
    def nixexprpath(self):
        """Gets the nixexprpath of this InlineObject2.  # noqa: E501

        the path to the file to evaluate  # noqa: E501

        :return: The nixexprpath of this InlineObject2.  # noqa: E501
        :rtype: str
        """
        return self._nixexprpath

    @nixexprpath.setter
    def nixexprpath(self, nixexprpath):
        """Sets the nixexprpath of this InlineObject2.

        the path to the file to evaluate  # noqa: E501

        :param nixexprpath: The nixexprpath of this InlineObject2.  # noqa: E501
        :type: str
        """

        self._nixexprpath = nixexprpath

    @property
    def inputs(self):
        """Gets the inputs of this InlineObject2.  # noqa: E501

        inputs for this jobset  # noqa: E501

        :return: The inputs of this InlineObject2.  # noqa: E501
        :rtype: dict(str, JobsetInput)
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this InlineObject2.

        inputs for this jobset  # noqa: E501

        :param inputs: The inputs of this InlineObject2.  # noqa: E501
        :type: dict(str, JobsetInput)
        """

        self._inputs = inputs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject2):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject2):
            return True

        return self.to_dict() != other.to_dict()
