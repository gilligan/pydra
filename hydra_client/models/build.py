# coding: utf-8

"""
    Hydra API

    Specification of the Hydra REST API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from hydra_client.configuration import Configuration


class Build(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'starttime': 'int',
        'stoptime': 'int',
        'timestamp': 'int',
        'jobsetevals': 'list[int]',
        'finished': 'bool',
        'nixname': 'str',
        'buildstatus': 'int',
        'jobset': 'str',
        'priority': 'int',
        'job': 'str',
        'drvpath': 'str',
        'system': 'str',
        'project': 'str',
        'buildproducts': 'dict(str, BuildProduct)',
        'buildoutputs': 'dict(str, BuildOutput)',
        'buildmetrics': 'BuildBuildmetrics'
    }

    attribute_map = {
        'id': 'id',
        'starttime': 'starttime',
        'stoptime': 'stoptime',
        'timestamp': 'timestamp',
        'jobsetevals': 'jobsetevals',
        'finished': 'finished',
        'nixname': 'nixname',
        'buildstatus': 'buildstatus',
        'jobset': 'jobset',
        'priority': 'priority',
        'job': 'job',
        'drvpath': 'drvpath',
        'system': 'system',
        'project': 'project',
        'buildproducts': 'buildproducts',
        'buildoutputs': 'buildoutputs',
        'buildmetrics': 'buildmetrics'
    }

    def __init__(self, id=None, starttime=None, stoptime=None, timestamp=None, jobsetevals=None, finished=None, nixname=None, buildstatus=None, jobset=None, priority=None, job=None, drvpath=None, system=None, project=None, buildproducts=None, buildoutputs=None, buildmetrics=None, local_vars_configuration=None):  # noqa: E501
        """Build - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._starttime = None
        self._stoptime = None
        self._timestamp = None
        self._jobsetevals = None
        self._finished = None
        self._nixname = None
        self._buildstatus = None
        self._jobset = None
        self._priority = None
        self._job = None
        self._drvpath = None
        self._system = None
        self._project = None
        self._buildproducts = None
        self._buildoutputs = None
        self._buildmetrics = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if starttime is not None:
            self.starttime = starttime
        if stoptime is not None:
            self.stoptime = stoptime
        if timestamp is not None:
            self.timestamp = timestamp
        if jobsetevals is not None:
            self.jobsetevals = jobsetevals
        if finished is not None:
            self.finished = finished
        if nixname is not None:
            self.nixname = nixname
        self.buildstatus = buildstatus
        if jobset is not None:
            self.jobset = jobset
        if priority is not None:
            self.priority = priority
        if job is not None:
            self.job = job
        if drvpath is not None:
            self.drvpath = drvpath
        if system is not None:
            self.system = system
        if project is not None:
            self.project = project
        if buildproducts is not None:
            self.buildproducts = buildproducts
        if buildoutputs is not None:
            self.buildoutputs = buildoutputs
        if buildmetrics is not None:
            self.buildmetrics = buildmetrics

    @property
    def id(self):
        """Gets the id of this Build.  # noqa: E501


        :return: The id of this Build.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Build.


        :param id: The id of this Build.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def starttime(self):
        """Gets the starttime of this Build.  # noqa: E501

        time when build started  # noqa: E501

        :return: The starttime of this Build.  # noqa: E501
        :rtype: int
        """
        return self._starttime

    @starttime.setter
    def starttime(self, starttime):
        """Sets the starttime of this Build.

        time when build started  # noqa: E501

        :param starttime: The starttime of this Build.  # noqa: E501
        :type: int
        """

        self._starttime = starttime

    @property
    def stoptime(self):
        """Gets the stoptime of this Build.  # noqa: E501

        time when build ended  # noqa: E501

        :return: The stoptime of this Build.  # noqa: E501
        :rtype: int
        """
        return self._stoptime

    @stoptime.setter
    def stoptime(self, stoptime):
        """Sets the stoptime of this Build.

        time when build ended  # noqa: E501

        :param stoptime: The stoptime of this Build.  # noqa: E501
        :type: int
        """

        self._stoptime = stoptime

    @property
    def timestamp(self):
        """Gets the timestamp of this Build.  # noqa: E501

        time when the build was first created  # noqa: E501

        :return: The timestamp of this Build.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Build.

        time when the build was first created  # noqa: E501

        :param timestamp: The timestamp of this Build.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def jobsetevals(self):
        """Gets the jobsetevals of this Build.  # noqa: E501

        list of evaluations this build is part of  # noqa: E501

        :return: The jobsetevals of this Build.  # noqa: E501
        :rtype: list[int]
        """
        return self._jobsetevals

    @jobsetevals.setter
    def jobsetevals(self, jobsetevals):
        """Sets the jobsetevals of this Build.

        list of evaluations this build is part of  # noqa: E501

        :param jobsetevals: The jobsetevals of this Build.  # noqa: E501
        :type: list[int]
        """

        self._jobsetevals = jobsetevals

    @property
    def finished(self):
        """Gets the finished of this Build.  # noqa: E501

        true when the build is finished  # noqa: E501

        :return: The finished of this Build.  # noqa: E501
        :rtype: bool
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this Build.

        true when the build is finished  # noqa: E501

        :param finished: The finished of this Build.  # noqa: E501
        :type: bool
        """

        self._finished = finished

    @property
    def nixname(self):
        """Gets the nixname of this Build.  # noqa: E501

        name from the build's derivation  # noqa: E501

        :return: The nixname of this Build.  # noqa: E501
        :rtype: str
        """
        return self._nixname

    @nixname.setter
    def nixname(self, nixname):
        """Sets the nixname of this Build.

        name from the build's derivation  # noqa: E501

        :param nixname: The nixname of this Build.  # noqa: E501
        :type: str
        """

        self._nixname = nixname

    @property
    def buildstatus(self):
        """Gets the buildstatus of this Build.  # noqa: E501

        Indicates the build status:</br> <ul>  <li>0 : succeeded</li>  <li>1 : failed</li>  <li>2 : dependency failed</li>  <li>3 : aborted</li>  <li>4 : canceled by the user</li>  <li>6 : failed with output</li>  <li>7 : timed out</li>  <li>9 : aborted</li>  <li>10 : log size limit exceeded</li>  <li>11 : output size limit exceeded</li>  <li>*  : failed</li> </ul> <strong>Note:</strong>buildstatus should only be `null` if `finished` is false.   # noqa: E501

        :return: The buildstatus of this Build.  # noqa: E501
        :rtype: int
        """
        return self._buildstatus

    @buildstatus.setter
    def buildstatus(self, buildstatus):
        """Sets the buildstatus of this Build.

        Indicates the build status:</br> <ul>  <li>0 : succeeded</li>  <li>1 : failed</li>  <li>2 : dependency failed</li>  <li>3 : aborted</li>  <li>4 : canceled by the user</li>  <li>6 : failed with output</li>  <li>7 : timed out</li>  <li>9 : aborted</li>  <li>10 : log size limit exceeded</li>  <li>11 : output size limit exceeded</li>  <li>*  : failed</li> </ul> <strong>Note:</strong>buildstatus should only be `null` if `finished` is false.   # noqa: E501

        :param buildstatus: The buildstatus of this Build.  # noqa: E501
        :type: int
        """

        self._buildstatus = buildstatus

    @property
    def jobset(self):
        """Gets the jobset of this Build.  # noqa: E501

        jobset this build belongs to  # noqa: E501

        :return: The jobset of this Build.  # noqa: E501
        :rtype: str
        """
        return self._jobset

    @jobset.setter
    def jobset(self, jobset):
        """Sets the jobset of this Build.

        jobset this build belongs to  # noqa: E501

        :param jobset: The jobset of this Build.  # noqa: E501
        :type: str
        """

        self._jobset = jobset

    @property
    def priority(self):
        """Gets the priority of this Build.  # noqa: E501

        determines the priority with which this build will be executed (higher value means higher priority)  # noqa: E501

        :return: The priority of this Build.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Build.

        determines the priority with which this build will be executed (higher value means higher priority)  # noqa: E501

        :param priority: The priority of this Build.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def job(self):
        """Gets the job of this Build.  # noqa: E501

        nix attribute from the nixexprpath  # noqa: E501

        :return: The job of this Build.  # noqa: E501
        :rtype: str
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this Build.

        nix attribute from the nixexprpath  # noqa: E501

        :param job: The job of this Build.  # noqa: E501
        :type: str
        """

        self._job = job

    @property
    def drvpath(self):
        """Gets the drvpath of this Build.  # noqa: E501

        filename of the drv  # noqa: E501

        :return: The drvpath of this Build.  # noqa: E501
        :rtype: str
        """
        return self._drvpath

    @drvpath.setter
    def drvpath(self, drvpath):
        """Sets the drvpath of this Build.

        filename of the drv  # noqa: E501

        :param drvpath: The drvpath of this Build.  # noqa: E501
        :type: str
        """

        self._drvpath = drvpath

    @property
    def system(self):
        """Gets the system of this Build.  # noqa: E501

        system this build was done for  # noqa: E501

        :return: The system of this Build.  # noqa: E501
        :rtype: str
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this Build.

        system this build was done for  # noqa: E501

        :param system: The system of this Build.  # noqa: E501
        :type: str
        """

        self._system = system

    @property
    def project(self):
        """Gets the project of this Build.  # noqa: E501

        project this build belongs to  # noqa: E501

        :return: The project of this Build.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Build.

        project this build belongs to  # noqa: E501

        :param project: The project of this Build.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def buildproducts(self):
        """Gets the buildproducts of this Build.  # noqa: E501


        :return: The buildproducts of this Build.  # noqa: E501
        :rtype: dict(str, BuildProduct)
        """
        return self._buildproducts

    @buildproducts.setter
    def buildproducts(self, buildproducts):
        """Sets the buildproducts of this Build.


        :param buildproducts: The buildproducts of this Build.  # noqa: E501
        :type: dict(str, BuildProduct)
        """

        self._buildproducts = buildproducts

    @property
    def buildoutputs(self):
        """Gets the buildoutputs of this Build.  # noqa: E501


        :return: The buildoutputs of this Build.  # noqa: E501
        :rtype: dict(str, BuildOutput)
        """
        return self._buildoutputs

    @buildoutputs.setter
    def buildoutputs(self, buildoutputs):
        """Sets the buildoutputs of this Build.


        :param buildoutputs: The buildoutputs of this Build.  # noqa: E501
        :type: dict(str, BuildOutput)
        """

        self._buildoutputs = buildoutputs

    @property
    def buildmetrics(self):
        """Gets the buildmetrics of this Build.  # noqa: E501


        :return: The buildmetrics of this Build.  # noqa: E501
        :rtype: BuildBuildmetrics
        """
        return self._buildmetrics

    @buildmetrics.setter
    def buildmetrics(self, buildmetrics):
        """Sets the buildmetrics of this Build.


        :param buildmetrics: The buildmetrics of this Build.  # noqa: E501
        :type: BuildBuildmetrics
        """

        self._buildmetrics = buildmetrics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Build):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Build):
            return True

        return self.to_dict() != other.to_dict()
