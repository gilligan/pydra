# coding: utf-8

"""
    Hydra API

    Specification of the Hydra REST API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from hydra_client.configuration import Configuration


class JobsetEval(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'hasnewbuilds': 'bool',
        'builds': 'list[int]',
        'jobsetevalinputs': 'dict(str, JobsetEvalInput)'
    }

    attribute_map = {
        'id': 'id',
        'hasnewbuilds': 'hasnewbuilds',
        'builds': 'builds',
        'jobsetevalinputs': 'jobsetevalinputs'
    }

    def __init__(self, id=None, hasnewbuilds=None, builds=None, jobsetevalinputs=None, local_vars_configuration=None):  # noqa: E501
        """JobsetEval - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._hasnewbuilds = None
        self._builds = None
        self._jobsetevalinputs = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if hasnewbuilds is not None:
            self.hasnewbuilds = hasnewbuilds
        if builds is not None:
            self.builds = builds
        if jobsetevalinputs is not None:
            self.jobsetevalinputs = jobsetevalinputs

    @property
    def id(self):
        """Gets the id of this JobsetEval.  # noqa: E501


        :return: The id of this JobsetEval.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobsetEval.


        :param id: The id of this JobsetEval.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def hasnewbuilds(self):
        """Gets the hasnewbuilds of this JobsetEval.  # noqa: E501

        is true if the number of JobsetEval members is different from the prior evaluation. (will always be true on the first evaluation)  # noqa: E501

        :return: The hasnewbuilds of this JobsetEval.  # noqa: E501
        :rtype: bool
        """
        return self._hasnewbuilds

    @hasnewbuilds.setter
    def hasnewbuilds(self, hasnewbuilds):
        """Sets the hasnewbuilds of this JobsetEval.

        is true if the number of JobsetEval members is different from the prior evaluation. (will always be true on the first evaluation)  # noqa: E501

        :param hasnewbuilds: The hasnewbuilds of this JobsetEval.  # noqa: E501
        :type: bool
        """

        self._hasnewbuilds = hasnewbuilds

    @property
    def builds(self):
        """Gets the builds of this JobsetEval.  # noqa: E501

        List of builds generated for this jobset evaluation  # noqa: E501

        :return: The builds of this JobsetEval.  # noqa: E501
        :rtype: list[int]
        """
        return self._builds

    @builds.setter
    def builds(self, builds):
        """Sets the builds of this JobsetEval.

        List of builds generated for this jobset evaluation  # noqa: E501

        :param builds: The builds of this JobsetEval.  # noqa: E501
        :type: list[int]
        """

        self._builds = builds

    @property
    def jobsetevalinputs(self):
        """Gets the jobsetevalinputs of this JobsetEval.  # noqa: E501


        :return: The jobsetevalinputs of this JobsetEval.  # noqa: E501
        :rtype: dict(str, JobsetEvalInput)
        """
        return self._jobsetevalinputs

    @jobsetevalinputs.setter
    def jobsetevalinputs(self, jobsetevalinputs):
        """Sets the jobsetevalinputs of this JobsetEval.


        :param jobsetevalinputs: The jobsetevalinputs of this JobsetEval.  # noqa: E501
        :type: dict(str, JobsetEvalInput)
        """

        self._jobsetevalinputs = jobsetevalinputs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobsetEval):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobsetEval):
            return True

        return self.to_dict() != other.to_dict()
