# coding: utf-8

"""
    Hydra API

    Specification of the Hydra REST API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from hydra_client.configuration import Configuration


class JobsetEvalInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uri': 'str',
        'type': 'str',
        'revision': 'str',
        'value': 'OneOfbooleanstringarray',
        'dependency': 'str'
    }

    attribute_map = {
        'uri': 'uri',
        'type': 'type',
        'revision': 'revision',
        'value': 'value',
        'dependency': 'dependency'
    }

    def __init__(self, uri=None, type=None, revision=None, value=None, dependency=None, local_vars_configuration=None):  # noqa: E501
        """JobsetEvalInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uri = None
        self._type = None
        self._revision = None
        self._value = None
        self._dependency = None
        self.discriminator = None

        self.uri = uri
        if type is not None:
            self.type = type
        self.revision = revision
        self.value = value
        self.dependency = dependency

    @property
    def uri(self):
        """Gets the uri of this JobsetEvalInput.  # noqa: E501

        URI of this input (which differs depending on the type of the input)  # noqa: E501

        :return: The uri of this JobsetEvalInput.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this JobsetEvalInput.

        URI of this input (which differs depending on the type of the input)  # noqa: E501

        :param uri: The uri of this JobsetEvalInput.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def type(self):
        """Gets the type of this JobsetEvalInput.  # noqa: E501

        The type of this input  # noqa: E501

        :return: The type of this JobsetEvalInput.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JobsetEvalInput.

        The type of this input  # noqa: E501

        :param type: The type of this JobsetEvalInput.  # noqa: E501
        :type: str
        """
        allowed_values = ["bzr", "bzr-checkout", "bitbucketpulls", "darcs", "git", "githubpulls", "gitlabpulls", "hg", "path", "svn", "svn-checkout"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def revision(self):
        """Gets the revision of this JobsetEvalInput.  # noqa: E501

        A Git/Mercurial commit hash or a Subversion revision number.  # noqa: E501

        :return: The revision of this JobsetEvalInput.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this JobsetEvalInput.

        A Git/Mercurial commit hash or a Subversion revision number.  # noqa: E501

        :param revision: The revision of this JobsetEvalInput.  # noqa: E501
        :type: str
        """

        self._revision = revision

    @property
    def value(self):
        """Gets the value of this JobsetEvalInput.  # noqa: E501

        A value that corresponds to the type of input  # noqa: E501

        :return: The value of this JobsetEvalInput.  # noqa: E501
        :rtype: OneOfbooleanstringarray
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this JobsetEvalInput.

        A value that corresponds to the type of input  # noqa: E501

        :param value: The value of this JobsetEvalInput.  # noqa: E501
        :type: OneOfbooleanstringarray
        """

        self._value = value

    @property
    def dependency(self):
        """Gets the dependency of this JobsetEvalInput.  # noqa: E501

        **Deprecated**: The build id of another build   # noqa: E501

        :return: The dependency of this JobsetEvalInput.  # noqa: E501
        :rtype: str
        """
        return self._dependency

    @dependency.setter
    def dependency(self, dependency):
        """Sets the dependency of this JobsetEvalInput.

        **Deprecated**: The build id of another build   # noqa: E501

        :param dependency: The dependency of this JobsetEvalInput.  # noqa: E501
        :type: str
        """

        self._dependency = dependency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobsetEvalInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobsetEvalInput):
            return True

        return self.to_dict() != other.to_dict()
