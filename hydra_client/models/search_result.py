# coding: utf-8

"""
    Hydra API

    Specification of the Hydra REST API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from hydra_client.configuration import Configuration


class SearchResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'jobsets': 'list[Jobset]',
        'projects': 'list[Project]',
        'builds': 'list[Build]',
        'buildsdrv': 'list[Build]'
    }

    attribute_map = {
        'jobsets': 'jobsets',
        'projects': 'projects',
        'builds': 'builds',
        'buildsdrv': 'buildsdrv'
    }

    def __init__(self, jobsets=None, projects=None, builds=None, buildsdrv=None, local_vars_configuration=None):  # noqa: E501
        """SearchResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._jobsets = None
        self._projects = None
        self._builds = None
        self._buildsdrv = None
        self.discriminator = None

        if jobsets is not None:
            self.jobsets = jobsets
        if projects is not None:
            self.projects = projects
        if builds is not None:
            self.builds = builds
        if buildsdrv is not None:
            self.buildsdrv = buildsdrv

    @property
    def jobsets(self):
        """Gets the jobsets of this SearchResult.  # noqa: E501

        jobsets matching search term  # noqa: E501

        :return: The jobsets of this SearchResult.  # noqa: E501
        :rtype: list[Jobset]
        """
        return self._jobsets

    @jobsets.setter
    def jobsets(self, jobsets):
        """Sets the jobsets of this SearchResult.

        jobsets matching search term  # noqa: E501

        :param jobsets: The jobsets of this SearchResult.  # noqa: E501
        :type: list[Jobset]
        """

        self._jobsets = jobsets

    @property
    def projects(self):
        """Gets the projects of this SearchResult.  # noqa: E501

        projects missing search term  # noqa: E501

        :return: The projects of this SearchResult.  # noqa: E501
        :rtype: list[Project]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this SearchResult.

        projects missing search term  # noqa: E501

        :param projects: The projects of this SearchResult.  # noqa: E501
        :type: list[Project]
        """

        self._projects = projects

    @property
    def builds(self):
        """Gets the builds of this SearchResult.  # noqa: E501

        builds matching search term  # noqa: E501

        :return: The builds of this SearchResult.  # noqa: E501
        :rtype: list[Build]
        """
        return self._builds

    @builds.setter
    def builds(self, builds):
        """Sets the builds of this SearchResult.

        builds matching search term  # noqa: E501

        :param builds: The builds of this SearchResult.  # noqa: E501
        :type: list[Build]
        """

        self._builds = builds

    @property
    def buildsdrv(self):
        """Gets the buildsdrv of this SearchResult.  # noqa: E501

        derivations matching search term  # noqa: E501

        :return: The buildsdrv of this SearchResult.  # noqa: E501
        :rtype: list[Build]
        """
        return self._buildsdrv

    @buildsdrv.setter
    def buildsdrv(self, buildsdrv):
        """Sets the buildsdrv of this SearchResult.

        derivations matching search term  # noqa: E501

        :param buildsdrv: The buildsdrv of this SearchResult.  # noqa: E501
        :type: list[Build]
        """

        self._buildsdrv = buildsdrv

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchResult):
            return True

        return self.to_dict() != other.to_dict()
